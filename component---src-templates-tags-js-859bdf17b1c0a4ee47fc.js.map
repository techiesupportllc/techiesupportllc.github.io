{"version":3,"sources":["webpack:///./src/templates/tags.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","Tags","_ref","pageContext","data","tag","_data$allMarkdownRema","allMarkdownRemark","edges","totalCount","tagHeader","a","createElement","map","_ref2","node","slug","fields","title","frontmatter","key","to","tp","m","module","exports","require","default","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","loader","enqueue","React","createContext","ProdPageRenderer","location","pageResources","InternalPageRenderer","Object","assign","json"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,8BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,KAwDeS,UAlDF,SAAAC,GAA2B,IAAxBC,EAAwBD,EAAxBC,YAAaC,EAAWF,EAAXE,KACpBC,EAAQF,EAARE,IAD+BC,EAETF,EAAKG,kBAA3BC,EAF+BF,EAE/BE,MAAOC,EAFwBH,EAExBG,WACTC,EAAeD,EAAN,SACC,IAAfA,EAAmB,GAAK,KADV,kBAEEJ,EAFF,IAIf,OACCP,EAAAa,EAAAC,cAAA,WACCd,EAAAa,EAAAC,cAAA,UAAKF,GACLZ,EAAAa,EAAAC,cAAA,UACEJ,EAAMK,IAAI,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KACLC,EAASD,EAAKE,OAAdD,KACAE,EAAUH,EAAKI,YAAfD,MACR,OACCpB,EAAAa,EAAAC,cAAA,MAAIQ,IAAKJ,GACRlB,EAAAa,EAAAC,cAACZ,EAAA,EAAD,CAAMqB,GAAIL,GAAOE,OAMrBpB,EAAAa,EAAAC,cAACZ,EAAA,EAAD,CAAMsB,GAAG,SAAT,cA8BI,IAAM1B,EAAS,kCC1DtB,IAAsB2B,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,oCCA/C,IAAA1B,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAA+B,EAAApC,EAAA,IAAAqC,EAAArC,EAAAO,EAAA6B,GAAApC,EAAAG,EAAAD,EAAA,sBAAAmC,EAAAlB,IAAAnB,EAAA,KAAAA,EAAA,GAcyBsC,QAAOC,QAELC,IAAMC,cAAc,+ECMhCC,UAjBU,SAAAhC,GAAiC,IAA9BiC,EAA8BjC,EAA9BiC,SAAUC,EAAoBlC,EAApBkC,cACpC,OAAKA,EAGEJ,IAAMpB,cAAcyB,IAApBC,OAAAC,OAAA,CACLJ,WACAC,iBACGA,EAAcI,OALV","file":"component---src-templates-tags-js-859bdf17b1c0a4ee47fc.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\n//Components\nimport { Link, graphql } from \"gatsby\"\n\nconst Tags = ({ pageContext, data }) => {\n\tconst { tag } = pageContext\n\tconst { edges, totalCount } = data.allMarkdownRemark\n\tconst tagHeader = `${totalCount} post${\n\t\ttotalCount === 1 ? \"\" : \"s\"\n\t}\ttagged with \"${tag}\"`\n\n\treturn (\n\t\t<div>\n\t\t\t<h1>{tagHeader}</h1>\n\t\t\t<ul>\n\t\t\t\t{edges.map(({ node }) => {\n\t\t\t\t\tconst { slug } = node.fields\n\t\t\t\t\tconst { title } = node.frontmatter\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<li key={slug}>\n\t\t\t\t\t\t\t<Link to={slug}>{title}</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</ul>\n\t\t\t{}\n\t\t\t<Link tp=\"/tags\">All tags</Link>\n\t\t</div>\n\t)\n}\n\nTags.propTypes = {\n\tpageContext: PropTypes.shape({\n\t\ttag: PropTypes.string.isRequired,\n\t}),\n\tdata: PropTypes.shape({\n\t\tallMarkdownRemark: PropTypes.shape({\n\t\t\ttotalCount: PropTypes.number.isRequired,\n\t\t\tedges: PropTypes.arrayOf(\n\t\t\t\tPropTypes.shape({\n\t\t\t\t\tnode: PropTypes.shape({\n\t\t\t\t\t\tfrontmatter: PropTypes.shape({\n\t\t\t\t\t\t\ttitle: PropTypes.string.isRequired,\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tfields: PropTypes.shape({\n\t\t\t\t\t\t\tslug: PropTypes.string.isRequired,\n\t\t\t\t\t\t}),\n\t\t\t\t\t}),\n\t\t\t\t}).isRequired\n\t\t\t),\n\t\t}),\n\t}),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n\tquery($tag: String) {\n\t\tallMarkdownRemark(\n\t\t\tlimit: 2000\n\t\t\tsort: { fields: [frontmatter___date], order: DESC }\n\t\t\tfilter: { frontmatter: { tags: { in: [$tag] } } }\n\t\t) {\n\t\t\ttotalCount\n\t\t\tedges {\n\t\t\t\tnode {\n\t\t\t\t\tfields {\n\t\t\t\t\t\tslug\n\t\t\t\t\t}\n\t\t\t\t\tfrontmatter {\n\t\t\t\t\t\ttitle\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}